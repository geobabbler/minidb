{"version":3,"sources":["../src/mssql.js"],"names":["mssql","MSSQL","constructor","options","client","driver","ident","value","connect","db","shutdown","dialect","_each","sql","params","callback","Error","close","query","_execute","beginTransaction","commit","rollback","transaction","block","using","arrayFormatString","array","Number","isInteger","buildWhere","where","clause","key","Object","keys","push","buildInsert","attributes","includeNames","names","values","placeholders","Array","isArray","toString","Date","toISOString","raw","buildUpdate","sets","insertStatement","table","pk","join","insertStatements","arrayOfAttributes","arrayOfValues","insert","statement","result","all","id","toDatabase","column","type","fromDatabase"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,IAAIA,QAAQ,IAAZ;;AAEe,MAAMC,KAAN,4BAA6B;AAC1CC,cAAYC,OAAZ,EAAqB;AACnB,UAAMA,OAAN;;AAEA,SAAKC,MAAL,GAAcD,QAAQC,MAAtB;AACD;;AAED,aAAWC,MAAX,CAAkBA,MAAlB,EAA0B;AACxBL,YAAQK,MAAR;AACA;AACD;;AAEDC,QAAMC,KAAN,EAAa;AACX,WAAO,mBAAIA,KAAJ,EAAW,GAAX,CAAP;AACD;;AAED,SAAaC,OAAb,CAAqBC,EAArB,EAAyB;AAAA;AACvB,aAAO,MAAM,6BAAmBD,OAAnB,CAA2BC,EAA3B,CAAb;AADuB;AAExB;;AAED,SAAOC,QAAP,GAAkB;AAChB,iCAAmBA,QAAnB;AACD;;AAED,MAAIC,OAAJ,GAAc;AACZ,WAAO,OAAP;AACD;;AAEKC,OAAN,CAAYC,GAAZ,EAAiBC,MAAjB,EAAyBC,QAAzB,EAAmC;AAAA;AACjC,YAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AADiC;AAElC;;AAEKC,OAAN,GAAc;AAAA;AACZ,YAAM,IAAID,KAAJ,CAAU,iBAAV,CAAN;AADY;AAEb;;AAEKE,OAAN,CAAYL,GAAZ,EAAiBC,MAAjB,EAAyB;AAAA;AACvB,YAAM,IAAIE,KAAJ,CAAU,iBAAV,CAAN;AADuB;AAExB;;AAEKG,UAAN,CAAeN,GAAf,EAAoBC,MAApB,EAA4B;AAAA;AAC1B,YAAM,IAAIE,KAAJ,CAAU,iBAAV,CAAN;AAD0B;AAE3B;;AAEDI,qBAAmB;AACjB,UAAM,IAAIJ,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAEDK,WAAS;AACP,UAAM,IAAIL,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAEDM,aAAW;AACT,UAAM,IAAIN,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAEKO,aAAN,CAAkBC,KAAlB,EAAyB;AAAA;AACvB,YAAM,IAAIR,KAAJ,CAAU,iBAAV,CAAN;AADuB;AAExB;;AAED,SAAOO,WAAP,CAAmBpB,OAAnB,EAA4BqB,KAA5B,EAAmC;AACjC,UAAM,IAAIR,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,SAAaS,KAAb,CAAmBtB,OAAnB,EAA4BqB,KAA5B,EAAmC;AAAA;AACjC,YAAM,IAAIR,KAAJ,CAAU,iBAAV,CAAN;AADiC;AAElC;;AAEDU,oBAAkBC,KAAlB,EAAyB;AACvB,QAAIC,OAAOC,SAAP,CAAiBF,MAAM,CAAN,CAAjB,CAAJ,EAAgC;AAC9B,aAAO,qBAAP;AACD,KAFD,MAEO,IAAI,OAAOA,MAAM,CAAN,CAAP,KAAoB,QAAxB,EAAkC;AACvC,aAAO,+BAAP;AACD;;AAED,WAAO,WAAP;AACD;;AAEDG,aAAWC,KAAX,EAAkB;AAChB,UAAMC,SAAS,EAAf;;AAEA,QAAID,KAAJ,EAAW;AACT,WAAK,MAAME,GAAX,IAAkBC,OAAOC,IAAP,CAAYJ,KAAZ,CAAlB,EAAsC;AACpC,cAAMxB,QAAQwB,MAAME,GAAN,CAAd;;AAEA,YAAI1B,SAAS,IAAb,EAAmB;AACjByB,iBAAOI,IAAP,CAAY,kBAAO,cAAP,EAAuBH,GAAvB,CAAZ;AACF;AACA;AACC,SAJD,MAIO;AACLD,iBAAOI,IAAP,CAAY,2BAAY,WAAZ,EAAyBH,GAAzB,EAA8B1B,KAA9B,CAAZ;AACD;AACF;AACF;;AAED,WAAO,CAAEyB,MAAF,EAAU,EAAV,CAAP;AACD;;AAEDK,cAAYC,UAAZ,EAA6C;AAAA,QAArBC,YAAqB,uEAAN,IAAM;;AAC3C,UAAMC,QAAQ,EAAd;AACA,UAAMC,SAAS,EAAf;AACA,UAAMC,eAAe,EAArB;;AAEA;AACA;AACA;AACA;AACA,SAAK,MAAMT,GAAX,IAAkBC,OAAOC,IAAP,CAAYG,UAAZ,CAAlB,EAA2C;AACzC,UAAIC,YAAJ,EAAkB;AAChBC,cAAMJ,IAAN,CAAW,kBAAO,MAAP,EAAeH,GAAf,CAAX;AACD;;AAED,YAAM1B,QAAQ+B,WAAWL,GAAX,CAAd;;AAEA,UAAIU,MAAMC,OAAN,CAAcrC,KAAd,CAAJ,EAA0B;AACxB;AACAmC,qBAAaN,IAAb,CAAkB,2BAAY,IAAZ,EAAkB7B,MAAMsC,QAAN,EAAlB,CAAlB;AACD,OAHD,MAGO,IAAItC,iBAAiBuC,IAArB,EAA2B;AAChCJ,qBAAaN,IAAb,CAAkB,2BAAY,IAAZ,EAAkB7B,MAAMwC,WAAN,EAAlB,CAAlB;AACD,OAFM,MAEA,IAAIxC,SAASA,MAAMyC,GAAnB,EAAwB;AAC7BN,qBAAaN,IAAb,CAAkB,kBAAO,IAAP,EAAa7B,MAAMyC,GAAnB,CAAlB;AACD,OAFM,MAEA;AACLN,qBAAaN,IAAb,CAAkB,2BAAY,IAAZ,EAAkB7B,KAAlB,CAAlB;AACD;AACF;;AAED,WAAO,CAAEiC,KAAF,EAASE,YAAT,EAAuBD,MAAvB,CAAP;AACD;;AAEDQ,cAAYX,UAAZ,EAAwB;AACtB,UAAMY,OAAO,EAAb;AACA,UAAMT,SAAS,EAAf;;AAEA,SAAK,MAAMR,GAAX,IAAkBC,OAAOC,IAAP,CAAYG,UAAZ,CAAlB,EAA2C;AACzC,YAAM/B,QAAQ+B,WAAWL,GAAX,CAAd;;AAEA,UAAIU,MAAMC,OAAN,CAAcrC,KAAd,CAAJ,EAA0B;AACxB;AACA2C,aAAKd,IAAL,CAAU,2BAAY,WAAZ,EAAyBH,GAAzB,EAA8B1B,KAA9B,CAAV;AACD,OAHD,MAGO,IAAIA,iBAAiBuC,IAArB,EAA2B;AAChCI,aAAKd,IAAL,CAAU,2BAAY,WAAZ,EAAyBH,GAAzB,EAA8B1B,MAAMwC,WAAN,EAA9B,CAAV;AACD,OAFM,MAEA,IAAIxC,SAASA,MAAMyC,GAAnB,EAAwB;AAC7BE,aAAKd,IAAL,CAAU,kBAAO,WAAP,EAAoB7B,MAAMyC,GAA1B,CAAV;AACD,OAFM,MAEA;AACLE,aAAKd,IAAL,CAAU,2BAAY,WAAZ,EAAyBH,GAAzB,EAA8B1B,KAA9B,CAAV;AACD;AACF;;AAED,WAAO,CAAE2C,IAAF,EAAQT,MAAR,CAAP;AACD;;AAEDU,kBAAgBC,KAAhB,EAAuBd,UAAvB,EAAmCnC,OAAnC,EAA4C;AAC1C,QAAIA,WAAW,IAAX,IAAmBA,QAAQkD,EAAR,IAAc,IAArC,EAA2C;AACzC,YAAM,IAAIrC,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAHyC,uBAKF,KAAKqB,WAAL,CAAiBC,UAAjB,CALE;AAAA;;AAAA,UAKlCE,KALkC;AAAA,UAK3BE,YAL2B;AAAA,UAKbD,MALa;;AAO1C;;AAEA,UAAM5B,MAAM,kBAAO,qCAAP,EACOuC,KADP,EAEOZ,MAAMc,IAAN,CAAW,IAAX,CAFP,EAGOZ,aAAaY,IAAb,CAAkB,IAAlB,CAHP,EAIO,EAJP,CAAZ;;AAMA,WAAO,EAACzC,QAAD,EAAM4B,cAAN,EAAP;AACD;;AAEDc,mBAAiBH,KAAjB,EAAwBI,iBAAxB,EAA2CrD,OAA3C,EAAoD;AAClD,UAAMsD,gBAAgB,EAAtB;;AAEA,QAAIjB,QAAQ,IAAZ;;AAEA,SAAK,MAAMF,UAAX,IAAyBkB,iBAAzB,EAA4C;AAC1C,YAAME,SAAS,KAAKrB,WAAL,CAAiBC,UAAjB,EAA6BE,SAAS,IAAtC,CAAf;;AAEA,UAAIA,SAAS,IAAb,EAAmB;AACjBA,gBAAQkB,OAAO,CAAP,CAAR;AACD;;AAEDD,oBAAcrB,IAAd,CAAmB,MAAMsB,OAAO,CAAP,EAAUJ,IAAV,CAAe,IAAf,CAAN,GAA6B,GAAhD;AACD;;AAED,UAAMzC,MAAM,kBAAO,iCAAP,EACOuC,KADP,EAEOZ,MAAMc,IAAN,CAAW,IAAX,CAFP,EAGOG,cAAcH,IAAd,CAAmB,KAAnB,CAHP,CAAZ;;AAKA,WAAO,EAACzC,QAAD,EAAM4B,QAAQ,EAAd,EAAP;AACD;;AAEKiB,QAAN,CAAaN,KAAb,EAAoBd,UAApB,EAAgCnC,OAAhC,EAAyC;AAAA;;AAAA;AACvC,YAAMwD,YAAY,MAAKR,eAAL,CAAqBC,KAArB,EAA4Bd,UAA5B,EAAwCnC,OAAxC,CAAlB;;AAEA,YAAMyD,SAAS,MAAM,MAAKC,GAAL,CAASF,UAAU9C,GAAnB,EAAwB8C,UAAUlB,MAAlC,CAArB;;AAEA,aAAO,CAACmB,OAAO,CAAP,EAAUE,EAAlB;AALuC;AAMxC;;AAEDC,aAAWxD,KAAX,EAAkByD,MAAlB,EAA0B;AACxB,QAAIzD,SAAS,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,YAAQyD,OAAOC,IAAf;AACE,WAAK,UAAL;AACE,eAAO1D,MAAMwC,WAAN,EAAP;;AAEF;AACE,eAAO,MAAMgB,UAAN,CAAiBxD,KAAjB,EAAwByD,MAAxB,CAAP;AALJ;AAOD;;AAEDE,eAAa3D,KAAb,EAAoByD,MAApB,EAA4B;AAC1B,QAAIzD,SAAS,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,YAAQyD,OAAOC,IAAf;AACE,WAAK,UAAL;AACE,eAAO,IAAInB,IAAJ,CAASvC,KAAT,CAAP;;AAEF;AACE,eAAO,MAAM2D,YAAN,CAAmB3D,KAAnB,EAA0ByD,MAA1B,CAAP;AALJ;AAOD;AAlOyC;kBAAvB/D,K","file":"mssql.js","sourcesContent":["import PostgresConnection from './postgres-connection';\nimport mssqlformat from './mssql-format';\nimport { format } from 'util';\nimport esc from './esc';\nimport Database from './database';\n\nlet mssql = null;\n\nexport default class MSSQL extends Database {\n  constructor(options) {\n    super(options);\n\n    this.client = options.client;\n  }\n\n  static set driver(driver) {\n    mssql = driver;\n    // PostgresConnection.driver = driver;\n  }\n\n  ident(value) {\n    return esc(value, '\"');\n  }\n\n  static async connect(db) {\n    return await PostgresConnection.connect(db);\n  }\n\n  static shutdown() {\n    PostgresConnection.shutdown();\n  }\n\n  get dialect() {\n    return 'mssql';\n  }\n\n  async _each(sql, params, callback) {\n    throw new Error('not implemented');\n  }\n\n  async close() {\n    throw new Error('not implemented');\n  }\n\n  async query(sql, params) {\n    throw new Error('not implemented');\n  }\n\n  async _execute(sql, params) {\n    throw new Error('not implemented');\n  }\n\n  beginTransaction() {\n    throw new Error('not implemented');\n  }\n\n  commit() {\n    throw new Error('not implemented');\n  }\n\n  rollback() {\n    throw new Error('not implemented');\n  }\n\n  async transaction(block) {\n    throw new Error('not implemented');\n  }\n\n  static transaction(options, block) {\n    throw new Error('not implemented');\n  }\n\n  static async using(options, block) {\n    throw new Error('not implemented');\n  }\n\n  arrayFormatString(array) {\n    if (Number.isInteger(array[0])) {\n      return 'ARRAY[%L]::bigint[]';\n    } else if (typeof array[0] === 'number') {\n      return 'ARRAY[%L]::double precision[]';\n    }\n\n    return 'ARRAY[%L]';\n  }\n\n  buildWhere(where) {\n    const clause = [];\n\n    if (where) {\n      for (const key of Object.keys(where)) {\n        const value = where[key];\n\n        if (value == null) {\n          clause.push(format('[%s] IS NULL', key));\n        // } else if (Array.isArray(value)) {\n        //   clause.push(mssqlformat('%I = ANY (' + this.arrayFormatString(where[key]) + ')', key, value));\n        } else {\n          clause.push(mssqlformat('[%s] = %L', key, value));\n        }\n      }\n    }\n\n    return [ clause, [] ];\n  }\n\n  buildInsert(attributes, includeNames = true) {\n    const names = [];\n    const values = [];\n    const placeholders = [];\n\n    // Use the literal values instead of placeholders  because parameterized\n    // queries require prepared statements. Prepared statements are stateful\n    // and impose requirements on the connection that are incompatible with\n    // pgbouncer.\n    for (const key of Object.keys(attributes)) {\n      if (includeNames) {\n        names.push(format('[%s]', key));\n      }\n\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        // placeholders.push(format('ARRAY[%L]', value));\n        placeholders.push(mssqlformat('%L', value.toString()));\n      } else if (value instanceof Date) {\n        placeholders.push(mssqlformat('%L', value.toISOString()));\n      } else if (value && value.raw) {\n        placeholders.push(format('%s', value.raw));\n      } else {\n        placeholders.push(mssqlformat('%L', value));\n      }\n    }\n\n    return [ names, placeholders, values ];\n  }\n\n  buildUpdate(attributes) {\n    const sets = [];\n    const values = [];\n\n    for (const key of Object.keys(attributes)) {\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        // sets.push(mssqlformat('%I = ARRAY[%L]', key, value));\n        sets.push(mssqlformat('[%s] = %L', key, value));\n      } else if (value instanceof Date) {\n        sets.push(mssqlformat('[%s] = %L', key, value.toISOString()));\n      } else if (value && value.raw) {\n        sets.push(format('[%s] = %s', value.raw));\n      } else {\n        sets.push(mssqlformat('[%s] = %L', key, value));\n      }\n    }\n\n    return [ sets, values ];\n  }\n\n  insertStatement(table, attributes, options) {\n    if (options == null || options.pk == null) {\n      throw new Error('pk is required');\n    }\n\n    const [ names, placeholders, values ] = this.buildInsert(attributes);\n\n    // const returning = options && options.returnPrimaryKey === false ? '' : ' RETURNING ' + options.pk;\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES (%s)%s;',\n                       table,\n                       names.join(', '),\n                       placeholders.join(', '),\n                       '');\n\n    return {sql, values};\n  }\n\n  insertStatements(table, arrayOfAttributes, options) {\n    const arrayOfValues = [];\n\n    let names = null;\n\n    for (const attributes of arrayOfAttributes) {\n      const insert = this.buildInsert(attributes, names == null);\n\n      if (names == null) {\n        names = insert[0];\n      }\n\n      arrayOfValues.push('(' + insert[1].join(', ') + ')');\n    }\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES %s;',\n                       table,\n                       names.join(', '),\n                       arrayOfValues.join(',\\n'));\n\n    return {sql, values: {}};\n  }\n\n  async insert(table, attributes, options) {\n    const statement = this.insertStatement(table, attributes, options);\n\n    const result = await this.all(statement.sql, statement.values);\n\n    return +result[0].id;\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return value.toISOString();\n\n      default:\n        return super.toDatabase(value, column);\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return new Date(value);\n\n      default:\n        return super.fromDatabase(value, column);\n    }\n  }\n}\n"]}