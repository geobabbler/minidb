{"version":3,"sources":["../src/mssql-format.js"],"names":["fmtPattern","ident","literal","string","formatDate","date","replace","isReserved","value","arrayToList","useSpace","array","formatter","sql","temp","i","length","quoteIdent","undefined","Error","Date","toISOString","Buffer","Array","isArray","push","toString","Object","slice","test","quoted","c","quoteLiteral","explicitCast","JSON","stringify","hasBackslash","quoteString","config","cfg","pattern","formatWithArray","fmt","parameters","index","params","re","RegExp","_","type","position","tokens","split","parseInt","format","args","prototype","call","arguments","withArray"],"mappings":"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","file":"mssql-format.js","sourcesContent":["'use strict';\n\nvar fmtPattern = {\n    ident: 'I',\n    literal: 'L',\n    string: 's',\n};\n\n// convert to Postgres default ISO 8601 format\nfunction formatDate(date) {\n    date = date.replace('T', ' ');\n    date = date.replace('Z', '+00');\n    return date;\n}\n\nfunction isReserved(value) {\n    return false;\n}\n\nfunction arrayToList(useSpace, array, formatter) {\n    var sql = '';\n    var temp = [];\n\n    sql += useSpace ? ' (' : '(';\n    for (var i = 0; i < array.length; i++) {\n      sql += (i === 0 ? '' : ', ') + formatter(array[i]);\n    }\n    sql += ')';\n\n    return sql;\n}\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nfunction quoteIdent(value) {\n\n    if (value === undefined || value === null) {\n        throw new Error('SQL identifier cannot be null or undefined');\n    } else if (value === false) {\n        return '\"f\"';\n    } else if (value === true) {\n        return '\"t\"';\n    } else if (value instanceof Date) {\n        return '\"' + formatDate(value.toISOString()) + '\"';\n    } else if (value instanceof Buffer) {\n        throw new Error('SQL identifier cannot be a buffer');\n    } else if (Array.isArray(value) === true) {\n        var temp = [];\n        for (var i = 0; i < value.length; i++) {\n            if (Array.isArray(value[i]) === true) {\n                throw new Error('Nested array to grouped list conversion is not supported for SQL identifier');\n            } else {\n                temp.push(quoteIdent(value[i]));\n            }\n        }\n        return temp.toString();\n    } else if (value === Object(value)) {\n        throw new Error('SQL identifier cannot be an object');\n    }\n\n    var ident = value.toString().slice(0); // create copy\n\n    // do not quote a valid, unquoted identifier\n    if (/^[a-z_][a-z0-9_$]*$/.test(ident) === true && isReserved(ident) === false) {\n        return ident;\n    }\n\n    var quoted = '\"';\n\n    for (var i = 0; i < ident.length; i++) {\n        var c = ident[i];\n        if (c === '\"') {\n            quoted += c + c;\n        } else {\n            quoted += c;\n        }\n    }\n\n    quoted += '\"';\n\n    return quoted;\n};\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nfunction quoteLiteral(value) {\n\n    var literal = null;\n    var explicitCast = null;\n\n    if (value === undefined || value === null) {\n        return 'NULL';\n    } else if (value === false) {\n        return \"0\";\n    } else if (value === true) {\n        return \"1\";\n    } else if (value instanceof Date) {\n        return \"'\" + formatDate(value.toISOString()) + \"'\";\n    } else if (value instanceof Buffer) {\n        throw new Error('SQL literal cannot be a buffer');\n    } else if (Array.isArray(value) === true) {\n        var temp = [];\n        for (var i = 0; i < value.length; i++) {\n            if (Array.isArray(value[i]) === true) {\n                temp.push(arrayToList(i !== 0, value[i], quoteLiteral))\n            } else {\n                temp.push(quoteLiteral(value[i]));\n            }\n        }\n        return temp.toString();\n    } else if (value === Object(value)) {\n        literal = JSON.stringify(value);\n    } else {\n        literal = value.toString().slice(0); // create copy\n    }\n\n    var hasBackslash = false;\n    var quoted = '\\'';\n\n    for (var i = 0; i < literal.length; i++) {\n        var c = literal[i];\n        if (c === '\\'') {\n            quoted += c + c;\n        } else if (c === '\\\\') {\n            quoted += c + c;\n            hasBackslash = true;\n        } else {\n            quoted += c;\n        }\n    }\n\n    quoted += '\\'';\n\n    // if (hasBackslash === true) {\n    //     quoted = 'E' + quoted;\n    // }\n\n    // if (explicitCast) {\n    //     quoted += '::' + explicitCast;\n    // }\n\n    return quoted;\n};\n\nfunction quoteString(value) {\n\n    if (value === undefined || value === null) {\n        return '';\n    } else if (value === false) {\n        return '0';\n    } else if (value === true) {\n        return '1';\n    } else if (value instanceof Date) {\n        return formatDate(value.toISOString());\n    } else if (value instanceof Buffer) {\n        return '\\\\x' + value.toString('hex');\n    } else if (Array.isArray(value) === true) {\n        var temp = [];\n        for (var i = 0; i < value.length; i++) {\n            if (value[i] !== null && value[i] !== undefined) {\n                if (Array.isArray(value[i]) === true) {\n                    temp.push(arrayToList(i !== 0, value[i], quoteString));\n                } else {\n                    temp.push(quoteString(value[i]));\n                }\n            }\n        }\n        return temp.toString();\n    } else if (value === Object(value)) {\n        return JSON.stringify(value);\n    }\n\n    return value.toString().slice(0); // return copy\n}\n\nfunction config(cfg) {\n\n    // default\n    fmtPattern.ident = 'I';\n    fmtPattern.literal = 'L';\n    fmtPattern.string = 's';\n\n    if (cfg && cfg.pattern) {\n        if (cfg.pattern.ident) { fmtPattern.ident = cfg.pattern.ident; }\n        if (cfg.pattern.literal) { fmtPattern.literal = cfg.pattern.literal; }\n        if (cfg.pattern.string) { fmtPattern.string = cfg.pattern.string; }\n    }\n}\n\nfunction formatWithArray(fmt, parameters) {\n\n    var index = 0;\n    var params = parameters;\n\n    var re = '%(%|(\\\\d+\\\\$)?[';\n    re += fmtPattern.ident;\n    re += fmtPattern.literal;\n    re += fmtPattern.string;\n    re += '])';\n    re = new RegExp(re, 'g');\n\n    return fmt.replace(re, function(_, type) {\n\n        if (type === '%') {\n            return '%';\n        }\n\n        var position = index;\n        var tokens = type.split('$');\n\n        if (tokens.length > 1) {\n            position = parseInt(tokens[0]) - 1;\n            type = tokens[1];\n        }\n\n        if (position < 0) {\n            throw new Error('specified argument 0 but arguments start at 1');\n        } else if (position > params.length - 1) {\n            throw new Error('too few arguments');\n        }\n\n        index = position + 1;\n\n        if (type === fmtPattern.ident) {\n            return quoteIdent(params[position]);\n        } else if (type === fmtPattern.literal) {\n            return quoteLiteral(params[position]);\n        } else if (type === fmtPattern.string) {\n            return quoteString(params[position]);\n        }\n    });\n}\n\nfunction format(fmt) {\n    var args = Array.prototype.slice.call(arguments);\n    args = args.slice(1); // first argument is fmt\n    return formatWithArray(fmt, args);\n}\n\nformat.config = config;\nformat.ident = quoteIdent;\nformat.literal = quoteLiteral;\nformat.string = quoteString;\nformat.withArray = formatWithArray;\n\nexport default format;\n"]}